import Collider from "./SATcollider.js";
import Line from "./geometry/line.js";
import Vector from "./geometry/vector.js";

const DEFAULT_OUTLINE_COLOR = "#000";


export default class WorldObject extends Collider {
    constructor(pos, cornerOffsets) {
        super();
        this.pos = pos;
        this.velocity = new Vector(0, 0);
        this.mass = 1;
        this.cornerOffsets = cornerOffsets;
        this.bounce = 0;
    }
    drawOutline(engine, color=DEFAULT_OUTLINE_COLOR) {
        /** Draw the outline of the object */
        for (let line of this.getEdges()) {
            engine.drawer.drawGameLine(line, color, 0.01);
        }
    }
    draw(engine, color=DEFAULT_OUTLINE_COLOR) {
        /**  Default draw method, only calls this.drawOutline */
        this.drawOutline(engine, color);
    }
    getCorners() {
        /** Return a list of the corner positions. */
        let cornerOffsets = [];
        for (let corner of this.cornerOffsets) {
            cornerOffsets.push(corner.plus(this.pos));
        }
        return cornerOffsets;
    }
    getPos() {
        return this.pos;
    }
    getEdges() {
        /** Return a list of the edges of this.
         * List is generated by making a line between teh 1st and 2nd corner, then 2nd and 3rd etc. */
        let lines = [];
        for (let index = 0; index < this.cornerOffsets.length; index++) {
            let start = this.cornerOffsets[index].plus(this.getPos());
            let end = this.cornerOffsets[(index + 1) % this.cornerOffsets.length].plus(this.getPos());
            lines.push(new Line(start, end));
        }
        return lines;
    }
    capVelocity(maxVelocity) {
        this.velocity.x = Math.min(Math.max(-maxVelocity.x, this.velocity.x), maxVelocity.x);
        this.velocity.y = Math.min(Math.max(-maxVelocity.y, this.velocity.y), maxVelocity.y);
    }
}